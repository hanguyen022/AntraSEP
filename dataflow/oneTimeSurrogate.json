{
	"name": "oneTimeSurrogate",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "dimSupplier",
						"type": "DatasetReference"
					},
					"name": "DimSup"
				},
				{
					"dataset": {
						"referenceName": "odsSupplier",
						"type": "DatasetReference"
					},
					"name": "odsSupplier"
				},
				{
					"dataset": {
						"referenceName": "odsPOLines",
						"type": "DatasetReference"
					},
					"name": "odsPurchase"
				},
				{
					"dataset": {
						"referenceName": "factPurchase",
						"type": "DatasetReference"
					},
					"name": "factPurchase"
				},
				{
					"dataset": {
						"referenceName": "odsTransaction",
						"type": "DatasetReference"
					},
					"name": "odsTransactions"
				},
				{
					"dataset": {
						"referenceName": "factTransactions",
						"type": "DatasetReference"
					},
					"name": "factTran"
				},
				{
					"dataset": {
						"referenceName": "odsStockItems",
						"type": "DatasetReference"
					},
					"name": "odsStockItems"
				},
				{
					"dataset": {
						"referenceName": "dimStockItem",
						"type": "DatasetReference"
					},
					"name": "dimStockItem"
				},
				{
					"dataset": {
						"referenceName": "odsTransactionTypes",
						"type": "DatasetReference"
					},
					"name": "odsTransactionTypes"
				},
				{
					"dataset": {
						"referenceName": "dimTransactionTypes",
						"type": "DatasetReference"
					},
					"name": "dimTransactionTypes"
				},
				{
					"dataset": {
						"referenceName": "odsPaymentType",
						"type": "DatasetReference"
					},
					"name": "odsPaymentMethod"
				},
				{
					"dataset": {
						"referenceName": "dimPaymentMethod",
						"type": "DatasetReference"
					},
					"name": "dimPaymentMethod"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "surSupplier",
						"type": "DatasetReference"
					},
					"name": "ODSupdatedSurSup"
				},
				{
					"dataset": {
						"referenceName": "surPOLines",
						"type": "DatasetReference"
					},
					"name": "sink2"
				},
				{
					"dataset": {
						"referenceName": "surTransactions",
						"type": "DatasetReference"
					},
					"name": "sink3"
				},
				{
					"dataset": {
						"referenceName": "ItegrationStockItems",
						"type": "DatasetReference"
					},
					"name": "sink4"
				},
				{
					"dataset": {
						"referenceName": "surTransactionType",
						"type": "DatasetReference"
					},
					"name": "sink5"
				},
				{
					"dataset": {
						"referenceName": "surPaymentMethods",
						"type": "DatasetReference"
					},
					"name": "sink6"
				}
			],
			"transformations": [
				{
					"name": "joinMaxVal"
				},
				{
					"name": "UpdateSurrogateKey"
				},
				{
					"name": "join1"
				},
				{
					"name": "UpdateSurrogate"
				},
				{
					"name": "join2"
				},
				{
					"name": "updateSurrogateK"
				},
				{
					"name": "surrogateKey2"
				},
				{
					"name": "surrogateKey1"
				},
				{
					"name": "surrogateKey3"
				},
				{
					"name": "surrogateKey4"
				},
				{
					"name": "join3"
				},
				{
					"name": "updateSurKey"
				},
				{
					"name": "surrogateKey5"
				},
				{
					"name": "join4"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "surrogateKey6"
				},
				{
					"name": "join5"
				},
				{
					"name": "derivedColumn2"
				}
			],
			"scriptLines": [
				"source(output(",
				"          maxVal as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'Select max([Supplier Key]) as maxVal\\nFROM [Dimension].[Supplier]',",
				"     format: 'query') ~> DimSup",
				"source(output(",
				"          SupplierID as integer,",
				"          SupplierName as string,",
				"          SupplierCategoryID as integer,",
				"          PrimaryContactPersonID as integer,",
				"          AlternateContactPersonID as integer,",
				"          DeliveryMethodID as integer,",
				"          DeliveryCityID as integer,",
				"          PostalCityID as integer,",
				"          SupplierReference as string,",
				"          BankAccountName as string,",
				"          BankAccountBranch as string,",
				"          BankAccountCode as string,",
				"          BankAccountNumber as string,",
				"          BankInternationalCode as string,",
				"          PaymentDays as integer,",
				"          InternalComments as string,",
				"          PhoneNumber as string,",
				"          FaxNumber as string,",
				"          WebsiteURL as string,",
				"          DeliveryAddressLine1 as string,",
				"          DeliveryAddressLine2 as string,",
				"          DeliveryPostalCode as string,",
				"          DeliveryLocation as binary,",
				"          PostalAddressLine1 as string,",
				"          PostalAddressLine2 as string,",
				"          PostalPostalCode as string,",
				"          LastEditedBy as integer,",
				"          ValidFrom as timestamp,",
				"          ValidTo as timestamp,",
				"          IngestTime as string,",
				"          SurKey as long",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> odsSupplier",
				"source(output(",
				"          PurchaseOrderLineID as integer,",
				"          PurchaseOrderID as integer,",
				"          StockItemID as integer,",
				"          OrderedOuters as integer,",
				"          Description as string,",
				"          ReceivedOuters as integer,",
				"          PackageTypeID as integer,",
				"          ExpectedUnitPricePerOuter as decimal(18,2),",
				"          LastReceiptDate as date,",
				"          IsOrderLineFinalized as boolean,",
				"          LastEditedBy as integer,",
				"          LastEditedWhen as timestamp,",
				"          IngestTime as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> odsPurchase",
				"source(output(",
				"          maxVal as long",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'select max([Purchase Key]) as maxVal\\nFrom [Fact].[Purchase]',",
				"     format: 'query') ~> factPurchase",
				"source(output(",
				"          SupplierTransactionID as integer,",
				"          SupplierID as integer,",
				"          TransactionTypeID as integer,",
				"          PurchaseOrderID as integer,",
				"          PaymentMethodID as integer,",
				"          SupplierInvoiceNumber as string,",
				"          TransactionDate as date,",
				"          AmountExcludingTax as decimal(18,2),",
				"          TaxAmount as decimal(18,2),",
				"          TransactionAmount as decimal(18,2),",
				"          OutstandingBalance as decimal(18,2),",
				"          FinalizationDate as date,",
				"          IsFinalized as boolean,",
				"          LastEditedBy as integer,",
				"          LastEditedWhen as timestamp,",
				"          IngestTime as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> odsTransactions",
				"source(output(",
				"          MaxVal as long",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'select max([Transaction Key]) as MaxVal\\nfrom [Fact].[Transaction]',",
				"     format: 'query') ~> factTran",
				"source(output(",
				"          StockItemID as integer,",
				"          StockItemName as string,",
				"          SupplierID as integer,",
				"          ColorID as integer,",
				"          UnitPackageID as integer,",
				"          OuterPackageID as integer,",
				"          Brand as string,",
				"          Size as string,",
				"          LeadTimeDays as integer,",
				"          QuantityPerOuter as integer,",
				"          IsChillerStock as boolean,",
				"          Barcode as string,",
				"          TaxRate as decimal(18,3),",
				"          UnitPrice as decimal(18,2),",
				"          RecommendedRetailPrice as decimal(18,2),",
				"          TypicalWeightPerUnit as decimal(18,3),",
				"          MarketingComments as string,",
				"          InternalComments as string,",
				"          Photo as binary,",
				"          CustomFields as string,",
				"          Tags as string,",
				"          SearchDetails as string,",
				"          LastEditedBy as integer,",
				"          ValidFrom as timestamp,",
				"          ValidTo as timestamp,",
				"          IngestTime as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> odsStockItems",
				"source(output(",
				"          MaxVal as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'select max([Stock Item Key]) as MaxVal\\nfrom [Dimension].[Stock Item]',",
				"     format: 'query') ~> dimStockItem",
				"source(output(",
				"          TransactionTypeID as integer,",
				"          TransactionTypeName as string,",
				"          LastEditedBy as integer,",
				"          ValidFrom as timestamp,",
				"          ValidTo as timestamp,",
				"          IngestTime as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> odsTransactionTypes",
				"source(output(",
				"          MaxVal as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'select max([Transaction Type Key]) as MaxVal\\nFrom [Dimension].[Transaction Type]',",
				"     format: 'query') ~> dimTransactionTypes",
				"source(output(",
				"          PaymentMethodID as integer,",
				"          PaymentMethodName as string,",
				"          LastEditedBy as integer,",
				"          ValidFrom as timestamp,",
				"          ValidTo as timestamp,",
				"          IngestTime as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> odsPaymentMethod",
				"source(output(",
				"          maxVal as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'select max([Payment Method Key]) as maxVal\\nFrom [Dimension].[Payment Method]',",
				"     format: 'query') ~> dimPaymentMethod",
				"surrogateKey1, DimSup join(1==1,",
				"     joinType:'cross',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinMaxVal",
				"joinMaxVal derive(SurKey = SurKey + maxVal) ~> UpdateSurrogateKey",
				"surrogateKey2, factPurchase join(1==1,",
				"     joinType:'cross',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 derive(SurKey = maxVal+SurKey) ~> UpdateSurrogate",
				"surrogateKey3, factTran join(1==1,",
				"     joinType:'cross',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join2",
				"join2 derive(SurKey = SurKey + MaxVal) ~> updateSurrogateK",
				"odsPurchase keyGenerate(output(SurKey as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey2",
				"odsSupplier keyGenerate(output(SurKey as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey1",
				"odsTransactions keyGenerate(output(SurKey as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey3",
				"odsStockItems keyGenerate(output(SurKey as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey4",
				"surrogateKey4, dimStockItem join(1==1,",
				"     joinType:'cross',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join3",
				"join3 derive(SurKey = SurKey + MaxVal) ~> updateSurKey",
				"odsTransactionTypes keyGenerate(output(SurKey as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey5",
				"surrogateKey5, dimTransactionTypes join(1==1,",
				"     joinType:'cross',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join4",
				"join4 derive(SurKey = MaxVal + SurKey) ~> derivedColumn1",
				"odsPaymentMethod keyGenerate(output(SurKey as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey6",
				"surrogateKey6, dimPaymentMethod join(1==1,",
				"     joinType:'cross',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join5",
				"join5 derive(SurKey = SurKey+maxVal) ~> derivedColumn2",
				"UpdateSurrogateKey sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          SupplierID as integer,",
				"          SupplierName as string,",
				"          SupplierCategoryID as integer,",
				"          PrimaryContactPersonID as integer,",
				"          AlternateContactPersonID as integer,",
				"          DeliveryMethodID as integer,",
				"          DeliveryCityID as integer,",
				"          PostalCityID as integer,",
				"          SupplierReference as string,",
				"          BankAccountName as string,",
				"          BankAccountBranch as string,",
				"          BankAccountCode as string,",
				"          BankAccountNumber as string,",
				"          BankInternationalCode as string,",
				"          PaymentDays as integer,",
				"          InternalComments as string,",
				"          PhoneNumber as string,",
				"          FaxNumber as string,",
				"          WebsiteURL as string,",
				"          DeliveryAddressLine1 as string,",
				"          DeliveryAddressLine2 as string,",
				"          DeliveryPostalCode as string,",
				"          DeliveryLocation as binary,",
				"          PostalAddressLine1 as string,",
				"          PostalAddressLine2 as string,",
				"          PostalPostalCode as string,",
				"          LastEditedBy as integer,",
				"          ValidFrom as timestamp,",
				"          ValidTo as timestamp,",
				"          IngestTime as string,",
				"          SurKey as long",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     recreate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          SurKey,",
				"          SupplierID,",
				"          SupplierName,",
				"          SupplierCategoryID,",
				"          PrimaryContactPersonID,",
				"          AlternateContactPersonID,",
				"          DeliveryMethodID,",
				"          DeliveryCityID,",
				"          PostalCityID,",
				"          SupplierReference,",
				"          BankAccountName,",
				"          BankAccountBranch,",
				"          BankAccountCode,",
				"          BankAccountNumber,",
				"          BankInternationalCode,",
				"          PaymentDays,",
				"          InternalComments,",
				"          PhoneNumber,",
				"          FaxNumber,",
				"          WebsiteURL,",
				"          DeliveryAddressLine1,",
				"          DeliveryAddressLine2,",
				"          DeliveryPostalCode,",
				"          PostalAddressLine1,",
				"          PostalAddressLine2,",
				"          PostalPostalCode,",
				"          LastEditedBy,",
				"          ValidFrom,",
				"          ValidTo,",
				"          IngestTime",
				"     )) ~> ODSupdatedSurSup",
				"UpdateSurrogate sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          PurchaseOrderLineID as integer,",
				"          PurchaseOrderID as integer,",
				"          StockItemID as integer,",
				"          OrderedOuters as integer,",
				"          Description as string,",
				"          ReceivedOuters as integer,",
				"          PackageTypeID as integer,",
				"          ExpectedUnitPricePerOuter as decimal(18,2),",
				"          LastReceiptDate as date,",
				"          IsOrderLineFinalized as boolean,",
				"          LastEditedBy as integer,",
				"          LastEditedWhen as timestamp,",
				"          IngestTime as string,",
				"          SurKey as long",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     recreate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          SurKey,",
				"          PurchaseOrderLineID,",
				"          PurchaseOrderID,",
				"          StockItemID,",
				"          OrderedOuters,",
				"          Description,",
				"          ReceivedOuters,",
				"          PackageTypeID,",
				"          ExpectedUnitPricePerOuter,",
				"          LastReceiptDate,",
				"          IsOrderLineFinalized,",
				"          LastEditedBy,",
				"          LastEditedWhen,",
				"          IngestTime",
				"     )) ~> sink2",
				"updateSurrogateK sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          SupplierTransactionID as integer,",
				"          SupplierID as integer,",
				"          TransactionTypeID as integer,",
				"          PurchaseOrderID as integer,",
				"          PaymentMethodID as integer,",
				"          SupplierInvoiceNumber as string,",
				"          TransactionDate as date,",
				"          AmountExcludingTax as decimal(18,2),",
				"          TaxAmount as decimal(18,2),",
				"          TransactionAmount as decimal(18,2),",
				"          OutstandingBalance as decimal(18,2),",
				"          FinalizationDate as date,",
				"          IsFinalized as boolean,",
				"          LastEditedBy as integer,",
				"          LastEditedWhen as timestamp,",
				"          IngestTime as string,",
				"          SurKey as long",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     recreate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          SurKey,",
				"          SupplierTransactionID,",
				"          SupplierID,",
				"          TransactionTypeID,",
				"          PurchaseOrderID,",
				"          PaymentMethodID,",
				"          SupplierInvoiceNumber,",
				"          TransactionDate,",
				"          AmountExcludingTax,",
				"          TaxAmount,",
				"          TransactionAmount,",
				"          OutstandingBalance,",
				"          FinalizationDate,",
				"          IsFinalized,",
				"          LastEditedBy,",
				"          LastEditedWhen,",
				"          IngestTime",
				"     )) ~> sink3",
				"updateSurKey sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     recreate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          SurKey,",
				"          StockItemID,",
				"          StockItemName,",
				"          SupplierID,",
				"          ColorID,",
				"          UnitPackageID,",
				"          OuterPackageID,",
				"          Brand,",
				"          Size,",
				"          LeadTimeDays,",
				"          QuantityPerOuter,",
				"          IsChillerStock,",
				"          Barcode,",
				"          TaxRate,",
				"          UnitPrice,",
				"          RecommendedRetailPrice,",
				"          TypicalWeightPerUnit,",
				"          MarketingComments,",
				"          InternalComments,",
				"          Photo,",
				"          CustomFields,",
				"          Tags,",
				"          SearchDetails,",
				"          LastEditedBy,",
				"          ValidFrom,",
				"          ValidTo,",
				"          IngestTime",
				"     )) ~> sink4",
				"derivedColumn1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     recreate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          SurKey,",
				"          TransactionTypeID,",
				"          TransactionTypeName,",
				"          LastEditedBy,",
				"          ValidFrom,",
				"          ValidTo,",
				"          IngestTime",
				"     )) ~> sink5",
				"derivedColumn2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     recreate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          SurKey,",
				"          PaymentMethodID,",
				"          PaymentMethodName,",
				"          LastEditedBy,",
				"          ValidFrom,",
				"          ValidTo,",
				"          IngestTime",
				"     )) ~> sink6"
			]
		}
	}
}