{
	"name": "SCD Type 2",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "integrationSupplier",
						"type": "DatasetReference"
					},
					"name": "IntegrationSupplier"
				},
				{
					"dataset": {
						"referenceName": "dimSupplier",
						"type": "DatasetReference"
					},
					"name": "dimSup"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "dimSupplier",
						"type": "DatasetReference"
					},
					"name": "dimSupp"
				},
				{
					"dataset": {
						"referenceName": "dimSupplier",
						"type": "DatasetReference"
					},
					"name": "dimSupp1"
				}
			],
			"transformations": [
				{
					"name": "ChangeValidFrom"
				},
				{
					"name": "SameIDRecords"
				},
				{
					"name": "RecordsToChange"
				},
				{
					"name": "ColsFromDW"
				},
				{
					"name": "ChangeValidToCurrent"
				},
				{
					"name": "Update"
				}
			],
			"scriptLines": [
				"source(output(",
				"          SupplierSKey as integer,",
				"          SupplierID as integer,",
				"          SupplierName as string,",
				"          SupplierCategoryName as string,",
				"          PrimaryContactPersonID as integer,",
				"          SupplierReference as string,",
				"          PaymentDays as integer,",
				"          PostalPostalCode as string,",
				"          ValidFrom as timestamp,",
				"          ValidTo as timestamp,",
				"          IngestTime as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> IntegrationSupplier",
				"source(output(",
				"          {Supplier Key} as integer,",
				"          {WWI Supplier ID} as integer,",
				"          Supplier as string,",
				"          Category as string,",
				"          {Primary Contact} as string,",
				"          {Supplier Reference} as string,",
				"          {Payment Days} as integer,",
				"          {Postal Code} as string,",
				"          {Valid From} as timestamp,",
				"          {Valid To} as timestamp,",
				"          {Lineage Key} as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> dimSup",
				"IntegrationSupplier derive(ValidFrom = currentTimestamp()) ~> ChangeValidFrom",
				"IntegrationSupplier, dimSup lookup(SupplierID == {WWI Supplier ID},",
				"     multiple: true,",
				"     broadcast: 'auto',",
				"     pickup: 'any')~> SameIDRecords",
				"SameIDRecords filter(lesserOrEqual(toTimestamp('9999-12-31 23:59:59.9999998'), {Valid To})) ~> RecordsToChange",
				"RecordsToChange select(mapColumn(",
				"          {Supplier Key},",
				"          {WWI Supplier ID},",
				"          Supplier,",
				"          Category,",
				"          {Primary Contact},",
				"          {Supplier Reference},",
				"          {Payment Days},",
				"          {Postal Code},",
				"          {Valid From},",
				"          {Valid To},",
				"          {Lineage Key}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> ColsFromDW",
				"ColsFromDW derive({Valid To} = currentTimestamp()) ~> ChangeValidToCurrent",
				"ChangeValidToCurrent alterRow(updateIf(1==1)) ~> Update",
				"ChangeValidFrom sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          {Supplier Key} as integer,",
				"          {WWI Supplier ID} as integer,",
				"          Supplier as string,",
				"          Category as string,",
				"          {Primary Contact} as string,",
				"          {Supplier Reference} as string,",
				"          {Payment Days} as integer,",
				"          {Postal Code} as string,",
				"          {Valid From} as timestamp,",
				"          {Valid To} as timestamp,",
				"          {Lineage Key} as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          {Supplier Key} = SupplierSKey,",
				"          {WWI Supplier ID} = SupplierID,",
				"          Supplier = SupplierName,",
				"          Category = SupplierCategoryName,",
				"          {Primary Contact} = PrimaryContactPersonID,",
				"          {Supplier Reference} = SupplierReference,",
				"          {Payment Days} = PaymentDays,",
				"          {Postal Code} = PostalPostalCode,",
				"          {Valid From} = ValidFrom,",
				"          {Valid To} = ValidTo",
				"     )) ~> dimSupp",
				"Update sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          {Supplier Key} as integer,",
				"          {WWI Supplier ID} as integer,",
				"          Supplier as string,",
				"          Category as string,",
				"          {Primary Contact} as string,",
				"          {Supplier Reference} as string,",
				"          {Payment Days} as integer,",
				"          {Postal Code} as string,",
				"          {Valid From} as timestamp,",
				"          {Valid To} as timestamp,",
				"          {Lineage Key} as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:false,",
				"     updateable:true,",
				"     upsertable:false,",
				"     keys:['Supplier Key'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          {Supplier Key},",
				"          {WWI Supplier ID},",
				"          Supplier,",
				"          Category,",
				"          {Primary Contact},",
				"          {Supplier Reference},",
				"          {Payment Days},",
				"          {Postal Code},",
				"          {Valid From},",
				"          {Valid To},",
				"          {Lineage Key}",
				"     )) ~> dimSupp1"
			]
		}
	}
}