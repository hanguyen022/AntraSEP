{
	"name": "SCD Type 2",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "integrationSupplier",
						"type": "DatasetReference"
					},
					"name": "IntegrationSupplier"
				},
				{
					"dataset": {
						"referenceName": "dimSupplier",
						"type": "DatasetReference"
					},
					"name": "dimSup"
				},
				{
					"dataset": {
						"referenceName": "dimPaymentMethod",
						"type": "DatasetReference"
					},
					"name": "dimPaymentMethod"
				},
				{
					"dataset": {
						"referenceName": "integPaymentMethods",
						"type": "DatasetReference"
					},
					"name": "intePaymentMethod"
				},
				{
					"dataset": {
						"referenceName": "integTransactionType",
						"type": "DatasetReference"
					},
					"name": "inteTransactionType"
				},
				{
					"dataset": {
						"referenceName": "dimTransactionTypes",
						"type": "DatasetReference"
					},
					"name": "dimTransactionType"
				},
				{
					"dataset": {
						"referenceName": "dimStockItem",
						"type": "DatasetReference"
					},
					"name": "dimStockItem"
				},
				{
					"dataset": {
						"referenceName": "integStockItems",
						"type": "DatasetReference"
					},
					"name": "inteStockItem"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "dimSupplier",
						"type": "DatasetReference"
					},
					"name": "dimSupp"
				},
				{
					"dataset": {
						"referenceName": "dimSupplier",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "dimPaymentMethod",
						"type": "DatasetReference"
					},
					"name": "sink2"
				},
				{
					"dataset": {
						"referenceName": "dimTransactionTypes",
						"type": "DatasetReference"
					},
					"name": "sink3"
				},
				{
					"dataset": {
						"referenceName": "dimPaymentMethod",
						"type": "DatasetReference"
					},
					"name": "dimPaymentMethodd"
				},
				{
					"dataset": {
						"referenceName": "dimTransactionTypes",
						"type": "DatasetReference"
					},
					"name": "dimTransTypes"
				},
				{
					"dataset": {
						"referenceName": "dimStockItem",
						"type": "DatasetReference"
					},
					"name": "sink4"
				},
				{
					"dataset": {
						"referenceName": "dimStockItem",
						"type": "DatasetReference"
					},
					"name": "dimStockItems"
				}
			],
			"transformations": [
				{
					"name": "ChangeValidFrom"
				},
				{
					"name": "SameIDRecords"
				},
				{
					"name": "RecordsToChange"
				},
				{
					"name": "ColsFromDW"
				},
				{
					"name": "ChangeValidToCurrent"
				},
				{
					"name": "Update"
				},
				{
					"name": "lookup1"
				},
				{
					"name": "filter1"
				},
				{
					"name": "select1"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "alterRow1"
				},
				{
					"name": "lookup2"
				},
				{
					"name": "filter2"
				},
				{
					"name": "select2"
				},
				{
					"name": "derivedColumn3"
				},
				{
					"name": "alterRow2"
				},
				{
					"name": "derivedColumn4"
				},
				{
					"name": "derivedColumn5"
				},
				{
					"name": "lookup3"
				},
				{
					"name": "filter3"
				},
				{
					"name": "select3"
				},
				{
					"name": "derivedColumn6"
				},
				{
					"name": "alterRow3"
				},
				{
					"name": "derivedColumn7"
				}
			],
			"scriptLines": [
				"source(output(",
				"          SupplierSKey as integer,",
				"          SupplierID as integer,",
				"          SupplierName as string,",
				"          SupplierCategoryName as string,",
				"          PrimaryContactPersonID as integer,",
				"          SupplierReference as string,",
				"          PaymentDays as integer,",
				"          PostalPostalCode as string,",
				"          ValidFrom as timestamp,",
				"          ValidTo as timestamp,",
				"          IngestTime as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> IntegrationSupplier",
				"source(output(",
				"          {Supplier Key} as integer,",
				"          {WWI Supplier ID} as integer,",
				"          Supplier as string,",
				"          Category as string,",
				"          {Primary Contact} as string,",
				"          {Supplier Reference} as string,",
				"          {Payment Days} as integer,",
				"          {Postal Code} as string,",
				"          {Valid From} as timestamp,",
				"          {Valid To} as timestamp,",
				"          {Lineage Key} as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> dimSup",
				"source(output(",
				"          {Payment Method Key} as integer,",
				"          {WWI Payment Method ID} as integer,",
				"          {Payment Method} as string,",
				"          {Valid From} as timestamp,",
				"          {Valid To} as timestamp,",
				"          {Lineage Key} as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> dimPaymentMethod",
				"source(output(",
				"          SurKey as long,",
				"          PaymentMethodID as integer,",
				"          PaymentMethodName as string,",
				"          LastEditedBy as integer,",
				"          ValidFrom as timestamp,",
				"          ValidTo as timestamp,",
				"          IngestTime as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> intePaymentMethod",
				"source(output(",
				"          SurKey as long,",
				"          TransactionTypeID as integer,",
				"          TransactionTypeName as string,",
				"          LastEditedBy as integer,",
				"          ValidFrom as timestamp,",
				"          ValidTo as timestamp,",
				"          IngestTime as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> inteTransactionType",
				"source(output(",
				"          {Transaction Type Key} as integer,",
				"          {WWI Transaction Type ID} as integer,",
				"          {Transaction Type} as string,",
				"          {Valid From} as timestamp,",
				"          {Valid To} as timestamp,",
				"          {Lineage Key} as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> dimTransactionType",
				"source(output(",
				"          {Stock Item Key} as integer,",
				"          {WWI Stock Item ID} as integer,",
				"          {Stock Item} as string,",
				"          Color as string,",
				"          {Selling Package} as string,",
				"          {Buying Package} as string,",
				"          Brand as string,",
				"          Size as string,",
				"          {Lead Time Days} as integer,",
				"          {Quantity Per Outer} as integer,",
				"          {Is Chiller Stock} as boolean,",
				"          Barcode as string,",
				"          {Tax Rate} as decimal(18,3),",
				"          {Unit Price} as decimal(18,2),",
				"          {Recommended Retail Price} as decimal(18,2),",
				"          {Typical Weight Per Unit} as decimal(18,3),",
				"          Photo as binary,",
				"          {Valid From} as timestamp,",
				"          {Valid To} as timestamp,",
				"          {Lineage Key} as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> dimStockItem",
				"source(output(",
				"          SurKey as long,",
				"          StockItemID as integer,",
				"          StockItemName as string,",
				"          SupplierID as integer,",
				"          ColorID as integer,",
				"          UnitPackageID as integer,",
				"          OuterPackageID as integer,",
				"          Brand as string,",
				"          Size as string,",
				"          LeadTimeDays as integer,",
				"          QuantityPerOuter as integer,",
				"          IsChillerStock as boolean,",
				"          Barcode as string,",
				"          TaxRate as decimal(18,3),",
				"          UnitPrice as decimal(18,2),",
				"          RecommendedRetailPrice as decimal(18,2),",
				"          TypicalWeightPerUnit as decimal(18,3),",
				"          MarketingComments as string,",
				"          InternalComments as string,",
				"          Photo as binary,",
				"          CustomFields as string,",
				"          Tags as string,",
				"          SearchDetails as string,",
				"          LastEditedBy as integer,",
				"          ValidFrom as timestamp,",
				"          ValidTo as timestamp,",
				"          IngestTime as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> inteStockItem",
				"IntegrationSupplier derive(ValidFrom = currentTimestamp(),",
				"          Lineage = 0) ~> ChangeValidFrom",
				"IntegrationSupplier, dimSup lookup(SupplierID == {WWI Supplier ID},",
				"     multiple: true,",
				"     broadcast: 'auto',",
				"     pickup: 'any')~> SameIDRecords",
				"SameIDRecords filter(lesserOrEqual(toTimestamp('9999-12-31 23:59:59.9999998'), {Valid To})) ~> RecordsToChange",
				"RecordsToChange select(mapColumn(",
				"          {Supplier Key},",
				"          {WWI Supplier ID},",
				"          Supplier,",
				"          Category,",
				"          {Primary Contact},",
				"          {Supplier Reference},",
				"          {Payment Days},",
				"          {Postal Code},",
				"          {Valid From},",
				"          {Valid To},",
				"          {Lineage Key}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> ColsFromDW",
				"ColsFromDW derive({Valid To} = currentTimestamp()) ~> ChangeValidToCurrent",
				"ChangeValidToCurrent alterRow(updateIf(1==1)) ~> Update",
				"intePaymentMethod, dimPaymentMethod lookup(PaymentMethodID == {WWI Payment Method ID},",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookup1",
				"lookup1 filter(lesserOrEqual(toTimestamp('9999-12-31 23:59:59.9999998'), {Valid To})) ~> filter1",
				"filter1 select(mapColumn(",
				"          {Payment Method Key},",
				"          {WWI Payment Method ID},",
				"          {Payment Method},",
				"          {Valid From},",
				"          {Valid To},",
				"          {Lineage Key}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 derive({Valid To} = currentTimestamp()) ~> derivedColumn2",
				"derivedColumn2 alterRow(updateIf(1==1)) ~> alterRow1",
				"inteTransactionType, dimTransactionType lookup(TransactionTypeID == {WWI Transaction Type ID},",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookup2",
				"lookup2 filter(lesserOrEqual(toTimestamp('9999-12-31 23:59:59.9999998'), {Valid To})) ~> filter2",
				"filter2 select(mapColumn(",
				"          {Transaction Type Key},",
				"          {WWI Transaction Type ID},",
				"          {Transaction Type},",
				"          {Valid From},",
				"          {Valid To},",
				"          {Lineage Key}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"select2 derive({Valid To} = currentTimestamp()) ~> derivedColumn3",
				"derivedColumn3 alterRow(updateIf(1==1)) ~> alterRow2",
				"intePaymentMethod derive(ValidFrom = currentTimestamp(),",
				"          Lineage = 0) ~> derivedColumn4",
				"inteTransactionType derive(ValidFrom = currentTimestamp(),",
				"          Lineage = 0) ~> derivedColumn5",
				"inteStockItem, dimStockItem lookup(StockItemID == {WWI Stock Item ID},",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookup3",
				"lookup3 filter(lesserOrEqual(toTimestamp('9999-12-31 23:59:59.9999998'), {Valid To})) ~> filter3",
				"filter3 select(mapColumn(",
				"          {Stock Item Key},",
				"          {WWI Stock Item ID},",
				"          {Stock Item},",
				"          Color,",
				"          {Selling Package},",
				"          {Buying Package},",
				"          Brand = dimStockItem@Brand,",
				"          Size = dimStockItem@Size,",
				"          {Lead Time Days},",
				"          {Quantity Per Outer},",
				"          {Is Chiller Stock},",
				"          Barcode = dimStockItem@Barcode,",
				"          {Tax Rate},",
				"          {Unit Price},",
				"          {Recommended Retail Price},",
				"          {Typical Weight Per Unit},",
				"          Photo = dimStockItem@Photo,",
				"          {Valid From},",
				"          {Valid To},",
				"          {Lineage Key}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select3",
				"select3 derive({Valid To} = currentTimestamp()) ~> derivedColumn6",
				"derivedColumn6 alterRow(updateIf(1==1)) ~> alterRow3",
				"inteStockItem derive(ValidFrom = currentTimestamp(),",
				"          Lineage = 0) ~> derivedColumn7",
				"ChangeValidFrom sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          {Supplier Key} as integer,",
				"          {WWI Supplier ID} as integer,",
				"          Supplier as string,",
				"          Category as string,",
				"          {Primary Contact} as string,",
				"          {Supplier Reference} as string,",
				"          {Payment Days} as integer,",
				"          {Postal Code} as string,",
				"          {Valid From} as timestamp,",
				"          {Valid To} as timestamp,",
				"          {Lineage Key} as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 2,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          {Supplier Key} = SupplierSKey,",
				"          {WWI Supplier ID} = SupplierID,",
				"          Supplier = SupplierName,",
				"          Category = SupplierCategoryName,",
				"          {Primary Contact} = PrimaryContactPersonID,",
				"          {Supplier Reference} = SupplierReference,",
				"          {Payment Days} = PaymentDays,",
				"          {Postal Code} = PostalPostalCode,",
				"          {Valid From} = ValidFrom,",
				"          {Valid To} = ValidTo,",
				"          {Lineage Key} = Lineage",
				"     )) ~> dimSupp",
				"Update sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          {Supplier Key} as integer,",
				"          {WWI Supplier ID} as integer,",
				"          Supplier as string,",
				"          Category as string,",
				"          {Primary Contact} as string,",
				"          {Supplier Reference} as string,",
				"          {Payment Days} as integer,",
				"          {Postal Code} as string,",
				"          {Valid From} as timestamp,",
				"          {Valid To} as timestamp,",
				"          {Lineage Key} as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:false,",
				"     updateable:true,",
				"     upsertable:false,",
				"     keys:['Supplier Key'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 1,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          {Supplier Key},",
				"          {WWI Supplier ID},",
				"          Supplier,",
				"          Category,",
				"          {Primary Contact},",
				"          {Supplier Reference},",
				"          {Payment Days},",
				"          {Postal Code},",
				"          {Valid From},",
				"          {Valid To},",
				"          {Lineage Key}",
				"     )) ~> sink1",
				"alterRow1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          {Payment Method Key} as integer,",
				"          {WWI Payment Method ID} as integer,",
				"          {Payment Method} as string,",
				"          {Valid From} as timestamp,",
				"          {Valid To} as timestamp,",
				"          {Lineage Key} as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:false,",
				"     updateable:true,",
				"     upsertable:false,",
				"     keys:['Payment Method Key'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          {Payment Method Key},",
				"          {WWI Payment Method ID},",
				"          {Payment Method},",
				"          {Valid From},",
				"          {Valid To},",
				"          {Lineage Key}",
				"     )) ~> sink2",
				"alterRow2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          {Transaction Type Key} as integer,",
				"          {WWI Transaction Type ID} as integer,",
				"          {Transaction Type} as string,",
				"          {Valid From} as timestamp,",
				"          {Valid To} as timestamp,",
				"          {Lineage Key} as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:false,",
				"     updateable:true,",
				"     upsertable:false,",
				"     keys:['Transaction Type Key'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          {Transaction Type Key},",
				"          {WWI Transaction Type ID},",
				"          {Transaction Type},",
				"          {Valid From},",
				"          {Valid To},",
				"          {Lineage Key}",
				"     )) ~> sink3",
				"derivedColumn4 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          {Payment Method Key} as integer,",
				"          {WWI Payment Method ID} as integer,",
				"          {Payment Method} as string,",
				"          {Valid From} as timestamp,",
				"          {Valid To} as timestamp,",
				"          {Lineage Key} as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          {Payment Method Key} = SurKey,",
				"          {WWI Payment Method ID} = PaymentMethodID,",
				"          {Payment Method} = PaymentMethodName,",
				"          {Valid From} = ValidFrom,",
				"          {Valid To} = ValidTo,",
				"          {Lineage Key} = Lineage",
				"     )) ~> dimPaymentMethodd",
				"derivedColumn5 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          {Transaction Type Key} as integer,",
				"          {WWI Transaction Type ID} as integer,",
				"          {Transaction Type} as string,",
				"          {Valid From} as timestamp,",
				"          {Valid To} as timestamp,",
				"          {Lineage Key} as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          {Transaction Type Key} = SurKey,",
				"          {WWI Transaction Type ID} = TransactionTypeID,",
				"          {Transaction Type} = TransactionTypeName,",
				"          {Valid From} = ValidFrom,",
				"          {Valid To} = ValidTo,",
				"          {Lineage Key} = Lineage",
				"     )) ~> dimTransTypes",
				"alterRow3 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          {Stock Item Key} as integer,",
				"          {WWI Stock Item ID} as integer,",
				"          {Stock Item} as string,",
				"          Color as string,",
				"          {Selling Package} as string,",
				"          {Buying Package} as string,",
				"          Brand as string,",
				"          Size as string,",
				"          {Lead Time Days} as integer,",
				"          {Quantity Per Outer} as integer,",
				"          {Is Chiller Stock} as boolean,",
				"          Barcode as string,",
				"          {Tax Rate} as decimal(18,3),",
				"          {Unit Price} as decimal(18,2),",
				"          {Recommended Retail Price} as decimal(18,2),",
				"          {Typical Weight Per Unit} as decimal(18,3),",
				"          Photo as binary,",
				"          {Valid From} as timestamp,",
				"          {Valid To} as timestamp,",
				"          {Lineage Key} as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:false,",
				"     updateable:true,",
				"     upsertable:false,",
				"     keys:['Stock Item Key'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          {Stock Item Key},",
				"          {WWI Stock Item ID},",
				"          {Stock Item},",
				"          Color,",
				"          {Selling Package},",
				"          {Buying Package},",
				"          Brand,",
				"          Size,",
				"          {Lead Time Days},",
				"          {Quantity Per Outer},",
				"          {Is Chiller Stock},",
				"          Barcode,",
				"          {Tax Rate},",
				"          {Unit Price},",
				"          {Recommended Retail Price},",
				"          {Typical Weight Per Unit},",
				"          {Valid From},",
				"          {Valid To},",
				"          {Lineage Key}",
				"     )) ~> sink4",
				"derivedColumn7 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          {Stock Item Key} as integer,",
				"          {WWI Stock Item ID} as integer,",
				"          {Stock Item} as string,",
				"          Color as string,",
				"          {Selling Package} as string,",
				"          {Buying Package} as string,",
				"          Brand as string,",
				"          Size as string,",
				"          {Lead Time Days} as integer,",
				"          {Quantity Per Outer} as integer,",
				"          {Is Chiller Stock} as boolean,",
				"          Barcode as string,",
				"          {Tax Rate} as decimal(18,3),",
				"          {Unit Price} as decimal(18,2),",
				"          {Recommended Retail Price} as decimal(18,2),",
				"          {Typical Weight Per Unit} as decimal(18,3),",
				"          Photo as binary,",
				"          {Valid From} as timestamp,",
				"          {Valid To} as timestamp,",
				"          {Lineage Key} as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          {Stock Item Key} = SurKey,",
				"          {WWI Stock Item ID} = StockItemID,",
				"          {Stock Item} = StockItemName,",
				"          Color = ColorID,",
				"          {Selling Package} = OuterPackageID,",
				"          {Buying Package} = UnitPackageID,",
				"          Brand,",
				"          Size,",
				"          {Lead Time Days} = LeadTimeDays,",
				"          {Quantity Per Outer} = QuantityPerOuter,",
				"          {Is Chiller Stock} = IsChillerStock,",
				"          Barcode,",
				"          {Tax Rate} = TaxRate,",
				"          {Unit Price} = UnitPrice,",
				"          {Recommended Retail Price} = RecommendedRetailPrice,",
				"          {Typical Weight Per Unit} = TypicalWeightPerUnit,",
				"          Photo,",
				"          {Valid From} = ValidFrom,",
				"          {Valid To} = ValidTo,",
				"          {Lineage Key} = Lineage",
				"     )) ~> dimStockItems"
			]
		}
	}
}