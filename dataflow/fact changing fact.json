{
	"name": "fact changing fact",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "integrationPurchase",
						"type": "DatasetReference"
					},
					"name": "IntePurchase"
				},
				{
					"dataset": {
						"referenceName": "IntegrationTrans",
						"type": "DatasetReference"
					},
					"name": "IntegrationTrans"
				},
				{
					"dataset": {
						"referenceName": "dimStockItem",
						"type": "DatasetReference"
					},
					"name": "dimStockItem"
				},
				{
					"dataset": {
						"referenceName": "dimPaymentMethod",
						"type": "DatasetReference"
					},
					"name": "dimPaymentMethod"
				},
				{
					"dataset": {
						"referenceName": "dimTransactionTypes",
						"type": "DatasetReference"
					},
					"name": "dimTransType"
				},
				{
					"dataset": {
						"referenceName": "dimSupplier",
						"type": "DatasetReference"
					},
					"name": "dimSup"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "factTransactions",
						"type": "DatasetReference"
					},
					"name": "factTrans"
				},
				{
					"dataset": {
						"referenceName": "factPurchase",
						"type": "DatasetReference"
					},
					"name": "factPurchase"
				}
			],
			"transformations": [
				{
					"name": "join3"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "join4"
				},
				{
					"name": "join5"
				},
				{
					"name": "derivedColumn2"
				}
			],
			"scriptLines": [
				"source(output(",
				"          PurchaseSKey as long,",
				"          SupplierSKey as long,",
				"          OrderDate as date,",
				"          PurchaseOrderID as integer,",
				"          OrderedOuters as integer,",
				"          ReceivedOuters as integer,",
				"          PackageTypeID as integer,",
				"          IsOrderFinalized as boolean,",
				"          SupplierID as integer,",
				"          StockItemID as integer,",
				"          LastEditedWhen as timestamp,",
				"          IngestTime as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'select  *\\nfrom Integration.Purchase',",
				"     format: 'query') ~> IntePurchase",
				"source(output(",
				"          TransSKey as long,",
				"          TransactionDate as date,",
				"          SupplierSKey as long,",
				"          SupplierTransactionID as integer,",
				"          PurchaseOrderID as integer,",
				"          SupplierInvoiceNumber as string,",
				"          AmountExcludingTax as decimal(18,2),",
				"          TaxAmount as decimal(18,2),",
				"          TransactionAmount as decimal(18,2),",
				"          OutstandingBalance as decimal(18,2),",
				"          IsFinalized as boolean,",
				"          SupplierID as integer,",
				"          TransactionTypeID as integer,",
				"          PaymentMethodID as integer,",
				"          LastEditedWhen as timestamp,",
				"          IngestTime as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> IntegrationTrans",
				"source(output(",
				"          {Stock Item Key} as integer,",
				"          {WWI Stock Item ID} as integer,",
				"          {Stock Item} as string,",
				"          Color as string,",
				"          {Selling Package} as string,",
				"          {Buying Package} as string,",
				"          Brand as string,",
				"          Size as string,",
				"          {Lead Time Days} as integer,",
				"          {Quantity Per Outer} as integer,",
				"          {Is Chiller Stock} as boolean,",
				"          Barcode as string,",
				"          {Tax Rate} as decimal(18,3),",
				"          {Unit Price} as decimal(18,2),",
				"          {Recommended Retail Price} as decimal(18,2),",
				"          {Typical Weight Per Unit} as decimal(18,3),",
				"          Photo as binary,",
				"          {Valid From} as timestamp,",
				"          {Valid To} as timestamp,",
				"          {Lineage Key} as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> dimStockItem",
				"source(output(",
				"          {Payment Method Key} as integer,",
				"          {WWI Payment Method ID} as integer,",
				"          {Payment Method} as string,",
				"          {Valid From} as timestamp,",
				"          {Valid To} as timestamp,",
				"          {Lineage Key} as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> dimPaymentMethod",
				"source(output(",
				"          {Transaction Type Key} as integer,",
				"          {WWI Transaction Type ID} as integer,",
				"          {Transaction Type} as string,",
				"          {Valid From} as timestamp,",
				"          {Valid To} as timestamp,",
				"          {Lineage Key} as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> dimTransType",
				"source(output(",
				"          {Supplier Key} as integer,",
				"          {WWI Supplier ID} as integer,",
				"          Supplier as string,",
				"          Category as string,",
				"          {Primary Contact} as string,",
				"          {Supplier Reference} as string,",
				"          {Payment Days} as integer,",
				"          {Postal Code} as string,",
				"          {Valid From} as timestamp,",
				"          {Valid To} as timestamp,",
				"          {Lineage Key} as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> dimSup",
				"IntegrationTrans join(SupplierID == {WWI Supplier ID},",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join3",
				"join3 derive(Lineage = 0\r",
				") ~> derivedColumn1",
				"IntePurchase, dimSup join(SupplierID == {WWI Supplier ID},",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join4",
				"join4, dimStockItem join(StockItemID == {WWI Stock Item ID},",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join5",
				"join5 derive(Lineage = 0) ~> derivedColumn2",
				"derivedColumn1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          {Transaction Key} as long,",
				"          {Date Key} as date,",
				"          {Customer Key} as integer,",
				"          {Bill To Customer Key} as integer,",
				"          {Supplier Key} as integer,",
				"          {Transaction Type Key} as integer,",
				"          {Payment Method Key} as integer,",
				"          {WWI Customer Transaction ID} as integer,",
				"          {WWI Supplier Transaction ID} as integer,",
				"          {WWI Invoice ID} as integer,",
				"          {WWI Purchase Order ID} as integer,",
				"          {Supplier Invoice Number} as string,",
				"          {Total Excluding Tax} as decimal(18,2),",
				"          {Tax Amount} as decimal(18,2),",
				"          {Total Including Tax} as decimal(18,2),",
				"          {Outstanding Balance} as decimal(18,2),",
				"          {Is Finalized} as boolean,",
				"          {Lineage Key} as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          {Date Key} = TransactionDate,",
				"          {Supplier Key},",
				"          {Transaction Type Key} = TransactionTypeID,",
				"          {Payment Method Key} = PaymentMethodID,",
				"          {WWI Supplier Transaction ID} = SupplierTransactionID,",
				"          {WWI Purchase Order ID} = PurchaseOrderID,",
				"          {Supplier Invoice Number} = SupplierInvoiceNumber,",
				"          {Total Excluding Tax} = AmountExcludingTax,",
				"          {Tax Amount} = TaxAmount,",
				"          {Total Including Tax} = TransactionAmount,",
				"          {Outstanding Balance} = OutstandingBalance,",
				"          {Is Finalized} = IsFinalized,",
				"          {Lineage Key}",
				"     )) ~> factTrans",
				"derivedColumn2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          {Purchase Key} as long,",
				"          {Date Key} as date,",
				"          {Supplier Key} as integer,",
				"          {Stock Item Key} as integer,",
				"          {WWI Purchase Order ID} as integer,",
				"          {Ordered Outers} as integer,",
				"          {Ordered Quantity} as integer,",
				"          {Received Outers} as integer,",
				"          Package as string,",
				"          {Is Order Finalized} as boolean,",
				"          {Lineage Key} as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          {Supplier Key},",
				"          {Stock Item Key}",
				"     )) ~> factPurchase"
			]
		}
	}
}